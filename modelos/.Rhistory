select(-"__index_level_0__")
datos_modelo=datos %>%
select(-c("released_year",
"released_month",
"released_day",
"track_name",
"artist(s)_name"))
fit_data <- function(object, model, data, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE, ...)))
}
fit(object, data, ...)
}
fit_split <- function(object, model, split, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE)), model)
}
tune::last_fit(object, split, ...)
}
particion = datos_modelo %>%
initial_split()
datos_ent= particion %>% training()
datos_test= particion %>% testing()
rf_spec=rand_forest() %>%
set_engine("randomForest") %>%
set_mode("regression")
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 7)
rf_wf=
workflow() %>%
add_model(rf_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 10)
rf_wf %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics()
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 5)
rf_wf=
workflow() %>%
add_model(rf_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 10)
rf_wf %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics()
rm(list=ls())
library(tidyverse)
library(arrow)
library(tidymodels)
datos=read_feather("datos.feather")
datos=datos %>%
select(-"__index_level_0__")
datos_modelo=datos %>%
select(-c("released_year",
"released_month",
"released_day",
"track_name",
"artist(s)_name"))
fit_data <- function(object, model, data, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE, ...)))
}
fit(object, data, ...)
}
fit_split <- function(object, model, split, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE)), model)
}
tune::last_fit(object, split, ...)
}
particion = datos_modelo %>%
initial_split()
datos_ent= particion %>% training()
datos_test= particion %>% testing()
lm_spec=linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 5)
lm_wf=
workflow() %>%
add_model(lm_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 10)
lm_wf %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics()
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 7)
lm_wf=
workflow() %>%
add_model(lm_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 10)
lm_wf %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics()
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 5)
lm_wf=
workflow() %>%
add_model(lm_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 10)
lm_wf %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics()
rm(list=ls())
library(tidyverse)
library(arrow)
library(tidymodels)
datos=read_feather("datos.feather")
datos=datos %>%
select(-"__index_level_0__")
datos_modelo=datos %>%
select(-c("released_year",
"released_month",
"released_day",
"track_name",
"artist(s)_name"))
fit_data <- function(object, model, data, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE, ...)))
}
fit(object, data, ...)
}
fit_split <- function(object, model, split, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE)), model)
}
tune::last_fit(object, split, ...)
}
particion = datos_modelo %>%
initial_split()
datos_ent= particion %>% training()
datos_test= particion %>% testing()
svm_spec=svm_rbf(cost=tune(),rbf_sigma=tune()) %>%
set_engine("kernlab") %>%
set_mode("regression")
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 7)
svm_wf=
workflow() %>%
add_model(svm_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 10)
svm_param=
expand_grid(cost = 3^(1:4), rbf_sigma = 3^(-5:-2))
svm_mejor=svm_wf %>%
tune_grid(resamples = cv_folds, grid = svm_param) %>%
select_best(metric = "rmse")
svm_spec=svm_rbf(cost=tune(),rbf_sigma=tune()) %>%
set_engine("kernlab") %>%
set_mode("regression")
svm_mejor
svm_wf %>%
finalize_workflow(svm_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics()
?rand_forest()
rm(list=ls())
library(tidyverse)
library(arrow)
library(tidymodels)
datos=read_feather("datos.feather")
datos=datos %>%
select(-"__index_level_0__")
datos_modelo=datos %>%
select(-c("released_year",
"released_month",
"released_day",
"track_name",
"artist(s)_name"))
fit_data <- function(object, model, data, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE, ...)))
}
fit(object, data, ...)
}
fit_split <- function(object, model, split, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE)), model)
}
tune::last_fit(object, split, ...)
}
particion = datos_modelo %>%
initial_split()
datos_ent= particion %>% training()
datos_test= particion %>% testing()
rf_spec=rand_forest(mtry=tune(),
trees=tune(),
min_n=tune()) %>%
set_engine("randomForest") %>%
set_mode("regression")
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 5)
rf_wf=
workflow() %>%
add_model(svm_spec) %>%
add_recipe(preprocesado)
rf_wf=
workflow() %>%
add_model(rf_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 10)
rf_param=
expand_grid(mtry=1:(ncol(datos_modelo)-1),
trees=seq(100,500,by=10),
min_n=1:10)
rf_mejor=svm_wf %>%
tune_grid(resamples = cv_folds, grid = svm_param) %>%
select_best(metric = "rmse")
rf_mejor=rf_wf %>%
tune_grid(resamples = cv_folds, grid = svm_param) %>%
select_best(metric = "rmse")
rf_mejor=rf_wf %>%
tune_grid(resamples = cv_folds, grid = rf_param) %>%
select_best(metric = "rmse")
rm(list=ls())
library(tidyverse)
library(arrow)
library(tidymodels)
datos=read_feather("datos.feather")
datos=datos %>%
select(-"__index_level_0__")
datos_modelo=datos %>%
select(-c("released_year",
"released_month",
"released_day",
"track_name",
"artist(s)_name"))
fit_data <- function(object, model, data, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE, ...)))
}
fit(object, data, ...)
}
fit_split <- function(object, model, split, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE)), model)
}
tune::last_fit(object, split, ...)
}
particion = datos_modelo %>%
initial_split()
datos_ent= particion %>% training()
datos_test= particion %>% testing()
rf_spec=rand_forest(mtry=tune(),
trees=tune(),
min_n=tune()) %>%
set_engine("randomForest") %>%
set_mode("regression")
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 5)
rf_wf=
workflow() %>%
add_model(rf_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 5)
rf_param=
expand_grid(mtry=1:(ncol(datos_modelo)-1),
trees=seq(100,500,by=50),
min_n=seq(2,10,by=2))
rf_mejor=rf_wf %>%
tune_grid(resamples = cv_folds, grid = rf_param) %>%
select_best(metric = "rmse")
rm(list=ls())
library(tidyverse)
library(arrow)
library(tidymodels)
datos=read_feather("datos.feather")
datos=datos %>%
select(-"__index_level_0__")
datos_modelo=datos %>%
select(-c("released_year",
"released_month",
"released_day",
"track_name",
"artist(s)_name"))
fit_data <- function(object, model, data, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE, ...)))
}
fit(object, data, ...)
}
fit_split <- function(object, model, split, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE)), model)
}
tune::last_fit(object, split, ...)
}
particion = datos_modelo %>%
initial_split()
datos_ent= particion %>% training()
datos_test= particion %>% testing()
rf_spec=rand_forest(trees=tune(),
min_n=tune()) %>%
set_engine("randomForest") %>%
set_mode("regression")
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 5)
rf_wf=
workflow() %>%
add_model(rf_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 5)
rf_param=
expand_grid(trees=seq(100,300,by=50),
min_n=seq(2,10,by=2))
rf_mejor=rf_wf %>%
tune_grid(resamples = cv_folds, grid = rf_param) %>%
select_best(metric = "rmse")
rf_mejor
rf_wf %>%
finalize_workflow(svm_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics()
rf_wf %>%
finalize_workflow(rf_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics()
rm(list=ls())
library(tidyverse)
library(arrow)
library(tidymodels)
datos=read_feather("datos.feather")
datos=datos %>%
select(-"__index_level_0__")
datos_modelo=datos %>%
select(-c("released_year",
"released_month",
"released_day",
"track_name",
"artist(s)_name"))
fit_data <- function(object, model, data, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE, ...)))
}
fit(object, data, ...)
}
fit_split <- function(object, model, split, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE)), model)
}
tune::last_fit(object, split, ...)
}
particion = datos_modelo %>%
initial_split()
datos_ent= particion %>% training()
datos_test= particion %>% testing()
rf_spec=rand_forest(mtry=tune(),
trees=tune(),
min_n=tune()) %>%
set_engine("randomForest") %>%
set_mode("regression")
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 5)
rf_wf=
workflow() %>%
add_model(rf_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 5)
rf_param=
expand_grid(mtry=1:(ncol(datos_modelo)-1),
trees=seq(100,200,by=50),
min_n=seq(2,8,by=2))
rf_mejor=rf_wf %>%
tune_grid(resamples = cv_folds, grid = rf_param) %>%
select_best(metric = "rmse")
rf_param=
expand_grid(mtry=1:5,
trees=seq(100,200,by=50),
min_n=seq(2,8,by=2))
rf_mejor=rf_wf %>%
tune_grid(resamples = cv_folds, grid = rf_param) %>%
select_best(metric = "rmse")
rf_mejor
rf_wf %>%
finalize_workflow(rf_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics()
svm_wf %>%
finalize_workflow(svm_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics() %>%
mutate('.config'=rep("SVM",2))
rf_wf %>%
finalize_workflow(rf_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics() %>%
mutate('.config'=rep("SVM",2))
rf_wf %>%
finalize_workflow(rf_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics() %>%
mutate('.config'=rep("RF",2))
rf_wf %>%
finalize_workflow(rf_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics() %>%
mutate('.config'=rep("RandomForest",2))
rm(list=ls())
library(tidyverse)
library(arrow)
library(tidymodels)
datos=read_feather("datos.feather")
datos=datos %>%
select(-"__index_level_0__")
datos_modelo=datos %>%
select(-c("released_year",
"released_month",
"released_day",
"track_name",
"artist(s)_name"))
fit_data <- function(object, model, data, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE, ...)))
}
fit(object, data, ...)
}
fit_split <- function(object, model, split, ...) {
if (inherits(object, "formula")) {
object <- add_model(add_formula(workflow(), object, blueprint = hardhat::default_formula_blueprint(indicators = FALSE)), model)
}
tune::last_fit(object, split, ...)
}
particion = datos_modelo %>%
initial_split()
datos_ent= particion %>% training()
datos_test= particion %>% testing()
rf_spec=rand_forest(trees=tune(),
min_n=tune()) %>%
set_engine("randomForest") %>%
set_mode("regression")
preprocesado=recipe(streams ~ .,datos_modelo) %>%
step_novel(all_nominal()) %>%
step_dummy(all_nominal()) %>%
step_zv(all_predictors()) %>%
step_pca(all_predictors(), num_comp = 5)
rf_wf=
workflow() %>%
add_model(rf_spec) %>%
add_recipe(preprocesado)
cv_folds=
vfold_cv(datos_modelo, v = 10)
rf_param=
expand_grid(trees=seq(100,200,by=50),
min_n=seq(2,8,by=2))
rf_mejor=rf_wf %>%
tune_grid(resamples = cv_folds, grid = rf_param) %>%
select_best(metric = "rmse")
rf_mejor
rf_wf %>%
finalize_workflow(rf_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics() %>%
mutate('.config'=rep("RandomForest",2))
TablaResumen=rf_wf %>%
finalize_workflow(rf_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics() %>%
mutate('.config'=rep("RandomForest",2))
TablaResumen
TablaResumen=rf_wf %>%
finalize_workflow(rf_mejor) %>%
fit_resamples(resamples = cv_folds) %>%
collect_metrics() %>%
mutate('.config'=rep("RandomForest",2)) %>%
rbind(TablaResumen)
TablaResumen
?initial_split()
